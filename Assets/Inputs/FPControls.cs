//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Inputs/FPControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FPControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FPControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FPControls"",
    ""maps"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""id"": ""87d699b5-08b7-456d-b60e-2933ac3e688f"",
            ""actions"": [
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""d1487eb7-e0e2-4ff3-9852-45e49d4657d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraLook"",
                    ""type"": ""Value"",
                    ""id"": ""5e03bb8a-ab9e-454f-965e-e894f598540f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerMove"",
                    ""type"": ""Value"",
                    ""id"": ""2a883e18-4fef-478f-9ad6-dc734751fcfb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""eebd5dcd-a4c5-4a89-9098-8854d56887cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c03e28b5-b45d-4a86-92fe-07c793ddce1c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""CameraLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD Keys"",
                    ""id"": ""dcd6eef4-6f9f-41ee-a88c-241deb1763ac"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""3b730fc8-af2d-4abc-a607-d87f40daff24"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""a01dee76-c85e-4b4f-8ce9-650186e89239"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""42623b56-26b3-40a4-855d-a41c473fc06d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""9515561c-9cc9-4ff5-a23e-e6a6388100c3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""13ab2213-f039-4508-9939-417a337668fb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b3162c69-b5b9-4504-b985-72cb2aabbac9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c4ad6e7d-1dce-44e7-82ab-46bd82951046"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8157bf74-3d5a-4a06-84b2-5106c0b4ff54"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""66180f52-2391-467d-aac6-7c3d201c6eb1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5a5ab8da-fd49-4805-a8f9-6457c4605b40"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Keyboard and Mouse
        m_KeyboardandMouse = asset.FindActionMap("Keyboard and Mouse", throwIfNotFound: true);
        m_KeyboardandMouse_Pickup = m_KeyboardandMouse.FindAction("Pickup", throwIfNotFound: true);
        m_KeyboardandMouse_CameraLook = m_KeyboardandMouse.FindAction("CameraLook", throwIfNotFound: true);
        m_KeyboardandMouse_PlayerMove = m_KeyboardandMouse.FindAction("PlayerMove", throwIfNotFound: true);
        m_KeyboardandMouse_Interact = m_KeyboardandMouse.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard and Mouse
    private readonly InputActionMap m_KeyboardandMouse;
    private IKeyboardandMouseActions m_KeyboardandMouseActionsCallbackInterface;
    private readonly InputAction m_KeyboardandMouse_Pickup;
    private readonly InputAction m_KeyboardandMouse_CameraLook;
    private readonly InputAction m_KeyboardandMouse_PlayerMove;
    private readonly InputAction m_KeyboardandMouse_Interact;
    public struct KeyboardandMouseActions
    {
        private @FPControls m_Wrapper;
        public KeyboardandMouseActions(@FPControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pickup => m_Wrapper.m_KeyboardandMouse_Pickup;
        public InputAction @CameraLook => m_Wrapper.m_KeyboardandMouse_CameraLook;
        public InputAction @PlayerMove => m_Wrapper.m_KeyboardandMouse_PlayerMove;
        public InputAction @Interact => m_Wrapper.m_KeyboardandMouse_Interact;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardandMouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardandMouseActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardandMouseActions instance)
        {
            if (m_Wrapper.m_KeyboardandMouseActionsCallbackInterface != null)
            {
                @Pickup.started -= m_Wrapper.m_KeyboardandMouseActionsCallbackInterface.OnPickup;
                @Pickup.performed -= m_Wrapper.m_KeyboardandMouseActionsCallbackInterface.OnPickup;
                @Pickup.canceled -= m_Wrapper.m_KeyboardandMouseActionsCallbackInterface.OnPickup;
                @CameraLook.started -= m_Wrapper.m_KeyboardandMouseActionsCallbackInterface.OnCameraLook;
                @CameraLook.performed -= m_Wrapper.m_KeyboardandMouseActionsCallbackInterface.OnCameraLook;
                @CameraLook.canceled -= m_Wrapper.m_KeyboardandMouseActionsCallbackInterface.OnCameraLook;
                @PlayerMove.started -= m_Wrapper.m_KeyboardandMouseActionsCallbackInterface.OnPlayerMove;
                @PlayerMove.performed -= m_Wrapper.m_KeyboardandMouseActionsCallbackInterface.OnPlayerMove;
                @PlayerMove.canceled -= m_Wrapper.m_KeyboardandMouseActionsCallbackInterface.OnPlayerMove;
                @Interact.started -= m_Wrapper.m_KeyboardandMouseActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_KeyboardandMouseActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_KeyboardandMouseActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_KeyboardandMouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pickup.started += instance.OnPickup;
                @Pickup.performed += instance.OnPickup;
                @Pickup.canceled += instance.OnPickup;
                @CameraLook.started += instance.OnCameraLook;
                @CameraLook.performed += instance.OnCameraLook;
                @CameraLook.canceled += instance.OnCameraLook;
                @PlayerMove.started += instance.OnPlayerMove;
                @PlayerMove.performed += instance.OnPlayerMove;
                @PlayerMove.canceled += instance.OnPlayerMove;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public KeyboardandMouseActions @KeyboardandMouse => new KeyboardandMouseActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface IKeyboardandMouseActions
    {
        void OnPickup(InputAction.CallbackContext context);
        void OnCameraLook(InputAction.CallbackContext context);
        void OnPlayerMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
